
Sound_Operated_turn_on_clap_ATmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000085  00000000  00000000  00000149  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004e  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000be  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000dd  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

void main(void) 					// main fuinction
	{
	int PORT_STA;

	DDRB=0xFF; 						// declare Port B as a output port connected to the motors
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
	DDRD=0x00; 						// declare Port D as a inpute port connected to the sensor
  96:	11 ba       	out	0x11, r1	; 17
	{
	PORT_STA=PIND&0b01000000; 		// masking PD6 to the variable

		if(PORT_STA==0b01000000)	// sensor on

			PORTB=0b00000001;  		// take turn left
  98:	51 e0       	ldi	r21, 0x01	; 1

		
		if(PORT_STA==0b00000000)   	// sensor off

			PORTB=0b00001001;  		// move forward
  9a:	49 e0       	ldi	r20, 0x09	; 9
	DDRB=0xFF; 						// declare Port B as a output port connected to the motors
	DDRD=0x00; 						// declare Port D as a inpute port connected to the sensor
	
	while(1) 						// infinite loop
	{
	PORT_STA=PIND&0b01000000; 		// masking PD6 to the variable
  9c:	80 b3       	in	r24, 0x10	; 16
  9e:	90 e0       	ldi	r25, 0x00	; 0

		if(PORT_STA==0b01000000)	// sensor on
  a0:	9c 01       	movw	r18, r24
  a2:	20 74       	andi	r18, 0x40	; 64
  a4:	30 70       	andi	r19, 0x00	; 0
  a6:	86 ff       	sbrs	r24, 6
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x1c>

			PORTB=0b00000001;  		// take turn left
  aa:	58 bb       	out	0x18, r21	; 24
  ac:	f7 cf       	rjmp	.-18     	; 0x9c <main+0xa>

		
		if(PORT_STA==0b00000000)   	// sensor off
  ae:	23 2b       	or	r18, r19
  b0:	a9 f7       	brne	.-22     	; 0x9c <main+0xa>

			PORTB=0b00001001;  		// move forward
  b2:	48 bb       	out	0x18, r20	; 24
  b4:	f3 cf       	rjmp	.-26     	; 0x9c <main+0xa>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
