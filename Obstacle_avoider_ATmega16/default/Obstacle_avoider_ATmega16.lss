
Obstacle_avoider_ATmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000089c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000089c  00000930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  00000946  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000dd  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a3  00000000  00000000  00000a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000133  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000300  00000000  00000000  00001019  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017d  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000029e  00000000  00000000  000014c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  8a:	0c 94 4c 04 	jmp	0x898	; 0x898 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wait>:
int front_sensor_off=0b00000000;


void wait(float x)             // wait function
{
for(int i=0;i<(int)(46*x);i++)
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	48 e3       	ldi	r20, 0x38	; 56
  98:	52 e4       	ldi	r21, 0x42	; 66
  9a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__mulsf3>
  9e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__fixsfsi>
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	05 c0       	rjmp	.+10     	; 0xb6 <wait+0x24>
  ac:	fc 01       	movw	r30, r24
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <wait+0x1c>
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	26 17       	cp	r18, r22
  b8:	37 07       	cpc	r19, r23
  ba:	c4 f3       	brlt	.-16     	; 0xac <wait+0x1a>
_delay_loop_2(0);
}
  bc:	08 95       	ret

000000be <main>:


void main ()  				  // main function
{
  be:	2f 92       	push	r2
  c0:	3f 92       	push	r3
  c2:	4f 92       	push	r4
  c4:	5f 92       	push	r5
  c6:	6f 92       	push	r6
  c8:	7f 92       	push	r7
  ca:	8f 92       	push	r8
  cc:	9f 92       	push	r9
  ce:	af 92       	push	r10
  d0:	bf 92       	push	r11
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	29 97       	sbiw	r28, 0x09	; 9
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
DDRB = 0b11111111;            // declare PortB as a Output port connected to the motors
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	87 bb       	out	0x17, r24	; 23
DDRA = 0b00000000;            // declare PortA as a input port connected to the sensors
  f6:	1a ba       	out	0x1a, r1	; 26
{	
right_sensor = (PINA & 0b00000010);  // masking PA4 to right_sensor
left_sensor =  (PINA & 0b00000100);  // masking PA5 to Left sensor
front_sensor = (PINA & 0b00001000);  // masking PA6 to front_sensor

	   if(( left_sensor==left_sensor_off) & (right_sensor==right_sensor_off) & (front_sensor==front_sensor_on))
  f8:	20 91 76 00 	lds	r18, 0x0076
  fc:	30 91 77 00 	lds	r19, 0x0077
 100:	3f 83       	std	Y+7, r19	; 0x07
 102:	2e 83       	std	Y+6, r18	; 0x06
 104:	80 91 78 00 	lds	r24, 0x0078
 108:	90 91 79 00 	lds	r25, 0x0079
 10c:	9d 83       	std	Y+5, r25	; 0x05
 10e:	8c 83       	std	Y+4, r24	; 0x04
 110:	e0 91 6c 00 	lds	r30, 0x006C
 114:	f0 91 6d 00 	lds	r31, 0x006D
 118:	fb 83       	std	Y+3, r31	; 0x03
 11a:	ea 83       	std	Y+2, r30	; 0x02
		wait(1);
		PORTB=right_turn;            // take a right turn
		wait(.5);
	   }

	   if((left_sensor==left_sensor_off) & (right_sensor==right_sensor_off) & (front_sensor==front_sensor_off))
 11c:	20 90 7a 00 	lds	r2, 0x007A
 120:	30 90 7b 00 	lds	r3, 0x007B
	   {
         PORTB=move_forward;         // move forward
 124:	f0 91 64 00 	lds	r31, 0x0064
 128:	f9 83       	std	Y+1, r31	; 0x01
	   } 

       if(( left_sensor==left_sensor_on) & (right_sensor==right_sensor_off) & (front_sensor==front_sensor_off))
 12a:	40 90 6a 00 	lds	r4, 0x006A
 12e:	50 90 6b 00 	lds	r5, 0x006B
	   {
	    PORTB=move_backward;         // move backward
 132:	a0 90 60 00 	lds	r10, 0x0060
		wait(1);
		PORTB=right_turn;            // take right turn
 136:	90 90 62 00 	lds	r9, 0x0062
		wait(.5);
	   }
	 
	   if(( left_sensor==left_sensor_off) & (right_sensor==right_sensor_on) & (front_sensor==front_sensor_off))
 13a:	60 90 68 00 	lds	r6, 0x0068
 13e:	70 90 69 00 	lds	r7, 0x0069
	   {
	    PORTB=move_backward;  		// move backward
		wait(1);
		PORTB=left_turn;            // take left turn
 142:	80 90 66 00 	lds	r8, 0x0066
{	
right_sensor = (PINA & 0b00000010);  // masking PA4 to right_sensor
left_sensor =  (PINA & 0b00000100);  // masking PA5 to Left sensor
front_sensor = (PINA & 0b00001000);  // masking PA6 to front_sensor

	   if(( left_sensor==left_sensor_off) & (right_sensor==right_sensor_off) & (front_sensor==front_sensor_on))
 146:	ee 24       	eor	r14, r14
 148:	ff 24       	eor	r15, r15
  int right_sensor = 0;
  int front_sensor = 0;

while(1)   					  // create an infinite loop
{	
right_sensor = (PINA & 0b00000010);  // masking PA4 to right_sensor
 14a:	89 b3       	in	r24, 0x19	; 25
 14c:	28 2f       	mov	r18, r24
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	22 70       	andi	r18, 0x02	; 2
 152:	30 70       	andi	r19, 0x00	; 0
 154:	39 87       	std	Y+9, r19	; 0x09
 156:	28 87       	std	Y+8, r18	; 0x08
left_sensor =  (PINA & 0b00000100);  // masking PA5 to Left sensor
 158:	89 b3       	in	r24, 0x19	; 25
 15a:	68 2f       	mov	r22, r24
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	64 70       	andi	r22, 0x04	; 4
 160:	70 70       	andi	r23, 0x00	; 0
front_sensor = (PINA & 0b00001000);  // masking PA6 to front_sensor
 162:	89 b3       	in	r24, 0x19	; 25
 164:	48 2f       	mov	r20, r24
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	48 70       	andi	r20, 0x08	; 8
 16a:	50 70       	andi	r21, 0x00	; 0

	   if(( left_sensor==left_sensor_off) & (right_sensor==right_sensor_off) & (front_sensor==front_sensor_on))
 16c:	bb 24       	eor	r11, r11
 16e:	8e 81       	ldd	r24, Y+6	; 0x06
 170:	9f 81       	ldd	r25, Y+7	; 0x07
 172:	68 17       	cp	r22, r24
 174:	79 07       	cpc	r23, r25
 176:	11 f4       	brne	.+4      	; 0x17c <main+0xbe>
 178:	bb 24       	eor	r11, r11
 17a:	b3 94       	inc	r11
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	e8 85       	ldd	r30, Y+8	; 0x08
 180:	f9 85       	ldd	r31, Y+9	; 0x09
 182:	2c 81       	ldd	r18, Y+4	; 0x04
 184:	3d 81       	ldd	r19, Y+5	; 0x05
 186:	e2 17       	cp	r30, r18
 188:	f3 07       	cpc	r31, r19
 18a:	09 f4       	brne	.+2      	; 0x18e <main+0xd0>
 18c:	11 e0       	ldi	r17, 0x01	; 1
 18e:	8b 2d       	mov	r24, r11
 190:	81 23       	and	r24, r17
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	cc 24       	eor	r12, r12
 198:	dd 24       	eor	r13, r13
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	9b 81       	ldd	r25, Y+3	; 0x03
 19e:	48 17       	cp	r20, r24
 1a0:	59 07       	cpc	r21, r25
 1a2:	19 f4       	brne	.+6      	; 0x1aa <main+0xec>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	c8 2e       	mov	r12, r24
 1a8:	d1 2c       	mov	r13, r1
 1aa:	c9 01       	movw	r24, r18
 1ac:	8c 21       	and	r24, r12
 1ae:	9d 21       	and	r25, r13
 1b0:	89 2b       	or	r24, r25
 1b2:	a1 f0       	breq	.+40     	; 0x1dc <main+0x11e>
	   {
		PORTB = move_backward;	     // move backward
 1b4:	a8 ba       	out	0x18, r10	; 24
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	f7 01       	movw	r30, r14
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0xfe>
int front_sensor_off=0b00000000;


void wait(float x)             // wait function
{
for(int i=0;i<(int)(46*x);i++)
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	8e 32       	cpi	r24, 0x2E	; 46
 1c4:	91 05       	cpc	r25, r1
 1c6:	c9 f7       	brne	.-14     	; 0x1ba <main+0xfc>

	   if(( left_sensor==left_sensor_off) & (right_sensor==right_sensor_off) & (front_sensor==front_sensor_on))
	   {
		PORTB = move_backward;	     // move backward
		wait(1);
		PORTB=right_turn;            // take a right turn
 1c8:	98 ba       	out	0x18, r9	; 24
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	f7 01       	movw	r30, r14
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x112>
int front_sensor_off=0b00000000;


void wait(float x)             // wait function
{
for(int i=0;i<(int)(46*x);i++)
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	87 31       	cpi	r24, 0x17	; 23
 1d8:	91 05       	cpc	r25, r1
 1da:	c9 f7       	brne	.-14     	; 0x1ce <main+0x110>
		wait(1);
		PORTB=right_turn;            // take a right turn
		wait(.5);
	   }

	   if((left_sensor==left_sensor_off) & (right_sensor==right_sensor_off) & (front_sensor==front_sensor_off))
 1dc:	a0 e0       	ldi	r26, 0x00	; 0
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	42 15       	cp	r20, r2
 1e2:	53 05       	cpc	r21, r3
 1e4:	11 f4       	brne	.+4      	; 0x1ea <main+0x12c>
 1e6:	a1 e0       	ldi	r26, 0x01	; 1
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	2a 23       	and	r18, r26
 1ec:	3b 23       	and	r19, r27
 1ee:	23 2b       	or	r18, r19
 1f0:	11 f0       	breq	.+4      	; 0x1f6 <main+0x138>
	   {
         PORTB=move_forward;         // move forward
 1f2:	99 81       	ldd	r25, Y+1	; 0x01
 1f4:	98 bb       	out	0x18, r25	; 24
	   } 

       if(( left_sensor==left_sensor_on) & (right_sensor==right_sensor_off) & (front_sensor==front_sensor_off))
 1f6:	00 e0       	ldi	r16, 0x00	; 0
 1f8:	64 15       	cp	r22, r4
 1fa:	75 05       	cpc	r23, r5
 1fc:	09 f4       	brne	.+2      	; 0x200 <main+0x142>
 1fe:	01 e0       	ldi	r16, 0x01	; 1
 200:	10 23       	and	r17, r16
 202:	41 2f       	mov	r20, r17
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	ca 01       	movw	r24, r20
 208:	8a 23       	and	r24, r26
 20a:	9b 23       	and	r25, r27
 20c:	89 2b       	or	r24, r25
 20e:	a1 f0       	breq	.+40     	; 0x238 <main+0x17a>
	   {
	    PORTB=move_backward;         // move backward
 210:	a8 ba       	out	0x18, r10	; 24
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	f7 01       	movw	r30, r14
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <main+0x15a>
int front_sensor_off=0b00000000;


void wait(float x)             // wait function
{
for(int i=0;i<(int)(46*x);i++)
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	8e 32       	cpi	r24, 0x2E	; 46
 220:	91 05       	cpc	r25, r1
 222:	c9 f7       	brne	.-14     	; 0x216 <main+0x158>

       if(( left_sensor==left_sensor_on) & (right_sensor==right_sensor_off) & (front_sensor==front_sensor_off))
	   {
	    PORTB=move_backward;         // move backward
		wait(1);
		PORTB=right_turn;            // take right turn
 224:	98 ba       	out	0x18, r9	; 24
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	f7 01       	movw	r30, r14
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x16e>
int front_sensor_off=0b00000000;


void wait(float x)             // wait function
{
for(int i=0;i<(int)(46*x);i++)
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	87 31       	cpi	r24, 0x17	; 23
 234:	91 05       	cpc	r25, r1
 236:	c9 f7       	brne	.-14     	; 0x22a <main+0x16c>
		wait(1);
		PORTB=right_turn;            // take right turn
		wait(.5);
	   }
	 
	   if(( left_sensor==left_sensor_off) & (right_sensor==right_sensor_on) & (front_sensor==front_sensor_off))
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	e8 85       	ldd	r30, Y+8	; 0x08
 23c:	f9 85       	ldd	r31, Y+9	; 0x09
 23e:	e6 15       	cp	r30, r6
 240:	f7 05       	cpc	r31, r7
 242:	09 f4       	brne	.+2      	; 0x246 <main+0x188>
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	b6 22       	and	r11, r22
 248:	2b 2d       	mov	r18, r11
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	c9 01       	movw	r24, r18
 24e:	8a 23       	and	r24, r26
 250:	9b 23       	and	r25, r27
 252:	89 2b       	or	r24, r25
 254:	a1 f0       	breq	.+40     	; 0x27e <main+0x1c0>
	   {
	    PORTB=move_backward;  		// move backward
 256:	a8 ba       	out	0x18, r10	; 24
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	f7 01       	movw	r30, r14
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <main+0x1a0>
int front_sensor_off=0b00000000;


void wait(float x)             // wait function
{
for(int i=0;i<(int)(46*x);i++)
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	8e 32       	cpi	r24, 0x2E	; 46
 266:	91 05       	cpc	r25, r1
 268:	c9 f7       	brne	.-14     	; 0x25c <main+0x19e>
	 
	   if(( left_sensor==left_sensor_off) & (right_sensor==right_sensor_on) & (front_sensor==front_sensor_off))
	   {
	    PORTB=move_backward;  		// move backward
		wait(1);
		PORTB=left_turn;            // take left turn
 26a:	88 ba       	out	0x18, r8	; 24
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	f7 01       	movw	r30, r14
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <main+0x1b4>
int front_sensor_off=0b00000000;


void wait(float x)             // wait function
{
for(int i=0;i<(int)(46*x);i++)
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	87 31       	cpi	r24, 0x17	; 23
 27a:	91 05       	cpc	r25, r1
 27c:	c9 f7       	brne	.-14     	; 0x270 <main+0x1b2>
		wait(1);
		PORTB=left_turn;            // take left turn
		wait(.5);
	   }

	   if(( left_sensor==left_sensor_off) & (right_sensor==right_sensor_on) & (front_sensor==front_sensor_on))
 27e:	2c 21       	and	r18, r12
 280:	3d 21       	and	r19, r13
 282:	23 2b       	or	r18, r19
 284:	a1 f0       	breq	.+40     	; 0x2ae <main+0x1f0>
	   {
	    PORTB=move_backward;  		// move backward
 286:	a8 ba       	out	0x18, r10	; 24
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	f7 01       	movw	r30, r14
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x1d0>
int front_sensor_off=0b00000000;


void wait(float x)             // wait function
{
for(int i=0;i<(int)(46*x);i++)
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	8e 32       	cpi	r24, 0x2E	; 46
 296:	91 05       	cpc	r25, r1
 298:	c9 f7       	brne	.-14     	; 0x28c <main+0x1ce>

	   if(( left_sensor==left_sensor_off) & (right_sensor==right_sensor_on) & (front_sensor==front_sensor_on))
	   {
	    PORTB=move_backward;  		// move backward
		wait(1);
		PORTB=left_turn;            // take left turn
 29a:	88 ba       	out	0x18, r8	; 24
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	f7 01       	movw	r30, r14
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0x1e4>
int front_sensor_off=0b00000000;


void wait(float x)             // wait function
{
for(int i=0;i<(int)(46*x);i++)
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	87 31       	cpi	r24, 0x17	; 23
 2aa:	91 05       	cpc	r25, r1
 2ac:	c9 f7       	brne	.-14     	; 0x2a0 <main+0x1e2>
		wait(1);
		PORTB=left_turn;            // take left turn
		wait(.5);
	   }
	      	 
	   if(( left_sensor==left_sensor_on) & (right_sensor==right_sensor_on) & (front_sensor==front_sensor_off))
 2ae:	06 23       	and	r16, r22
 2b0:	80 2f       	mov	r24, r16
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	8a 23       	and	r24, r26
 2b6:	9b 23       	and	r25, r27
 2b8:	89 2b       	or	r24, r25
 2ba:	11 f0       	breq	.+4      	; 0x2c0 <main+0x202>
	   {
	    PORTB=move_forward;         // move forward
 2bc:	f9 81       	ldd	r31, Y+1	; 0x01
 2be:	f8 bb       	out	0x18, r31	; 24
	   }

	   if(( left_sensor==left_sensor_on) & (right_sensor==right_sensor_off) & (front_sensor==front_sensor_on))
 2c0:	4c 21       	and	r20, r12
 2c2:	5d 21       	and	r21, r13
 2c4:	45 2b       	or	r20, r21
 2c6:	09 f4       	brne	.+2      	; 0x2ca <main+0x20c>
 2c8:	40 cf       	rjmp	.-384    	; 0x14a <main+0x8c>
	   {
	    PORTB=move_backward;  		// move backward
 2ca:	a8 ba       	out	0x18, r10	; 24
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	f7 01       	movw	r30, r14
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x214>
int front_sensor_off=0b00000000;


void wait(float x)             // wait function
{
for(int i=0;i<(int)(46*x);i++)
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	8e 32       	cpi	r24, 0x2E	; 46
 2da:	91 05       	cpc	r25, r1
 2dc:	c9 f7       	brne	.-14     	; 0x2d0 <main+0x212>

	   if(( left_sensor==left_sensor_on) & (right_sensor==right_sensor_off) & (front_sensor==front_sensor_on))
	   {
	    PORTB=move_backward;  		// move backward
		wait(1);
		PORTB=right_turn;  			// take right turn
 2de:	98 ba       	out	0x18, r9	; 24
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	f7 01       	movw	r30, r14
 2e6:	31 97       	sbiw	r30, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <main+0x228>
int front_sensor_off=0b00000000;


void wait(float x)             // wait function
{
for(int i=0;i<(int)(46*x);i++)
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	87 31       	cpi	r24, 0x17	; 23
 2ee:	91 05       	cpc	r25, r1
 2f0:	c9 f7       	brne	.-14     	; 0x2e4 <main+0x226>
 2f2:	2b cf       	rjmp	.-426    	; 0x14a <main+0x8c>

000002f4 <__mulsf3>:
 2f4:	a0 e2       	ldi	r26, 0x20	; 32
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	e0 e8       	ldi	r30, 0x80	; 128
 2fa:	f1 e0       	ldi	r31, 0x01	; 1
 2fc:	0c 94 15 04 	jmp	0x82a	; 0x82a <__prologue_saves__>
 300:	69 83       	std	Y+1, r22	; 0x01
 302:	7a 83       	std	Y+2, r23	; 0x02
 304:	8b 83       	std	Y+3, r24	; 0x03
 306:	9c 83       	std	Y+4, r25	; 0x04
 308:	2d 83       	std	Y+5, r18	; 0x05
 30a:	3e 83       	std	Y+6, r19	; 0x06
 30c:	4f 83       	std	Y+7, r20	; 0x07
 30e:	58 87       	std	Y+8, r21	; 0x08
 310:	ce 01       	movw	r24, r28
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	be 01       	movw	r22, r28
 316:	67 5f       	subi	r22, 0xF7	; 247
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	0e 94 9d 03 	call	0x73a	; 0x73a <__unpack_f>
 31e:	ce 01       	movw	r24, r28
 320:	05 96       	adiw	r24, 0x05	; 5
 322:	be 01       	movw	r22, r28
 324:	6f 5e       	subi	r22, 0xEF	; 239
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	0e 94 9d 03 	call	0x73a	; 0x73a <__unpack_f>
 32c:	99 85       	ldd	r25, Y+9	; 0x09
 32e:	92 30       	cpi	r25, 0x02	; 2
 330:	88 f0       	brcs	.+34     	; 0x354 <__mulsf3+0x60>
 332:	89 89       	ldd	r24, Y+17	; 0x11
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	c8 f0       	brcs	.+50     	; 0x36a <__mulsf3+0x76>
 338:	94 30       	cpi	r25, 0x04	; 4
 33a:	19 f4       	brne	.+6      	; 0x342 <__mulsf3+0x4e>
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	51 f4       	brne	.+20     	; 0x354 <__mulsf3+0x60>
 340:	04 c0       	rjmp	.+8      	; 0x34a <__mulsf3+0x56>
 342:	84 30       	cpi	r24, 0x04	; 4
 344:	29 f4       	brne	.+10     	; 0x350 <__mulsf3+0x5c>
 346:	92 30       	cpi	r25, 0x02	; 2
 348:	81 f4       	brne	.+32     	; 0x36a <__mulsf3+0x76>
 34a:	8e e6       	ldi	r24, 0x6E	; 110
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	c6 c0       	rjmp	.+396    	; 0x4dc <__stack+0x7d>
 350:	92 30       	cpi	r25, 0x02	; 2
 352:	49 f4       	brne	.+18     	; 0x366 <__mulsf3+0x72>
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	9a 85       	ldd	r25, Y+10	; 0x0a
 358:	8a 89       	ldd	r24, Y+18	; 0x12
 35a:	98 13       	cpse	r25, r24
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	2a 87       	std	Y+10, r18	; 0x0a
 360:	ce 01       	movw	r24, r28
 362:	09 96       	adiw	r24, 0x09	; 9
 364:	bb c0       	rjmp	.+374    	; 0x4dc <__stack+0x7d>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	49 f4       	brne	.+18     	; 0x37c <__mulsf3+0x88>
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	9a 85       	ldd	r25, Y+10	; 0x0a
 36e:	8a 89       	ldd	r24, Y+18	; 0x12
 370:	98 13       	cpse	r25, r24
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	2a 8b       	std	Y+18, r18	; 0x12
 376:	ce 01       	movw	r24, r28
 378:	41 96       	adiw	r24, 0x11	; 17
 37a:	b0 c0       	rjmp	.+352    	; 0x4dc <__stack+0x7d>
 37c:	2d 84       	ldd	r2, Y+13	; 0x0d
 37e:	3e 84       	ldd	r3, Y+14	; 0x0e
 380:	4f 84       	ldd	r4, Y+15	; 0x0f
 382:	58 88       	ldd	r5, Y+16	; 0x10
 384:	6d 88       	ldd	r6, Y+21	; 0x15
 386:	7e 88       	ldd	r7, Y+22	; 0x16
 388:	8f 88       	ldd	r8, Y+23	; 0x17
 38a:	98 8c       	ldd	r9, Y+24	; 0x18
 38c:	ee 24       	eor	r14, r14
 38e:	ff 24       	eor	r15, r15
 390:	87 01       	movw	r16, r14
 392:	aa 24       	eor	r10, r10
 394:	bb 24       	eor	r11, r11
 396:	65 01       	movw	r12, r10
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	e0 e0       	ldi	r30, 0x00	; 0
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	c1 01       	movw	r24, r2
 3a6:	81 70       	andi	r24, 0x01	; 1
 3a8:	90 70       	andi	r25, 0x00	; 0
 3aa:	89 2b       	or	r24, r25
 3ac:	e9 f0       	breq	.+58     	; 0x3e8 <__mulsf3+0xf4>
 3ae:	e6 0c       	add	r14, r6
 3b0:	f7 1c       	adc	r15, r7
 3b2:	08 1d       	adc	r16, r8
 3b4:	19 1d       	adc	r17, r9
 3b6:	9a 01       	movw	r18, r20
 3b8:	ab 01       	movw	r20, r22
 3ba:	2a 0d       	add	r18, r10
 3bc:	3b 1d       	adc	r19, r11
 3be:	4c 1d       	adc	r20, r12
 3c0:	5d 1d       	adc	r21, r13
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	a0 e0       	ldi	r26, 0x00	; 0
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	e6 14       	cp	r14, r6
 3cc:	f7 04       	cpc	r15, r7
 3ce:	08 05       	cpc	r16, r8
 3d0:	19 05       	cpc	r17, r9
 3d2:	20 f4       	brcc	.+8      	; 0x3dc <__mulsf3+0xe8>
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	a0 e0       	ldi	r26, 0x00	; 0
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	ba 01       	movw	r22, r20
 3de:	a9 01       	movw	r20, r18
 3e0:	48 0f       	add	r20, r24
 3e2:	59 1f       	adc	r21, r25
 3e4:	6a 1f       	adc	r22, r26
 3e6:	7b 1f       	adc	r23, r27
 3e8:	aa 0c       	add	r10, r10
 3ea:	bb 1c       	adc	r11, r11
 3ec:	cc 1c       	adc	r12, r12
 3ee:	dd 1c       	adc	r13, r13
 3f0:	97 fe       	sbrs	r9, 7
 3f2:	08 c0       	rjmp	.+16     	; 0x404 <__mulsf3+0x110>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	a0 e0       	ldi	r26, 0x00	; 0
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	a8 2a       	or	r10, r24
 3fe:	b9 2a       	or	r11, r25
 400:	ca 2a       	or	r12, r26
 402:	db 2a       	or	r13, r27
 404:	31 96       	adiw	r30, 0x01	; 1
 406:	e0 32       	cpi	r30, 0x20	; 32
 408:	f1 05       	cpc	r31, r1
 40a:	49 f0       	breq	.+18     	; 0x41e <__mulsf3+0x12a>
 40c:	66 0c       	add	r6, r6
 40e:	77 1c       	adc	r7, r7
 410:	88 1c       	adc	r8, r8
 412:	99 1c       	adc	r9, r9
 414:	56 94       	lsr	r5
 416:	47 94       	ror	r4
 418:	37 94       	ror	r3
 41a:	27 94       	ror	r2
 41c:	c3 cf       	rjmp	.-122    	; 0x3a4 <__mulsf3+0xb0>
 41e:	fa 85       	ldd	r31, Y+10	; 0x0a
 420:	ea 89       	ldd	r30, Y+18	; 0x12
 422:	2b 89       	ldd	r18, Y+19	; 0x13
 424:	3c 89       	ldd	r19, Y+20	; 0x14
 426:	8b 85       	ldd	r24, Y+11	; 0x0b
 428:	9c 85       	ldd	r25, Y+12	; 0x0c
 42a:	28 0f       	add	r18, r24
 42c:	39 1f       	adc	r19, r25
 42e:	2e 5f       	subi	r18, 0xFE	; 254
 430:	3f 4f       	sbci	r19, 0xFF	; 255
 432:	17 c0       	rjmp	.+46     	; 0x462 <__stack+0x3>
 434:	ca 01       	movw	r24, r20
 436:	81 70       	andi	r24, 0x01	; 1
 438:	90 70       	andi	r25, 0x00	; 0
 43a:	89 2b       	or	r24, r25
 43c:	61 f0       	breq	.+24     	; 0x456 <__mulsf3+0x162>
 43e:	16 95       	lsr	r17
 440:	07 95       	ror	r16
 442:	f7 94       	ror	r15
 444:	e7 94       	ror	r14
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	a0 e0       	ldi	r26, 0x00	; 0
 44c:	b0 e8       	ldi	r27, 0x80	; 128
 44e:	e8 2a       	or	r14, r24
 450:	f9 2a       	or	r15, r25
 452:	0a 2b       	or	r16, r26
 454:	1b 2b       	or	r17, r27
 456:	76 95       	lsr	r23
 458:	67 95       	ror	r22
 45a:	57 95       	ror	r21
 45c:	47 95       	ror	r20
 45e:	2f 5f       	subi	r18, 0xFF	; 255
 460:	3f 4f       	sbci	r19, 0xFF	; 255
 462:	77 fd       	sbrc	r23, 7
 464:	e7 cf       	rjmp	.-50     	; 0x434 <__mulsf3+0x140>
 466:	0c c0       	rjmp	.+24     	; 0x480 <__stack+0x21>
 468:	44 0f       	add	r20, r20
 46a:	55 1f       	adc	r21, r21
 46c:	66 1f       	adc	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	17 fd       	sbrc	r17, 7
 472:	41 60       	ori	r20, 0x01	; 1
 474:	ee 0c       	add	r14, r14
 476:	ff 1c       	adc	r15, r15
 478:	00 1f       	adc	r16, r16
 47a:	11 1f       	adc	r17, r17
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	30 40       	sbci	r19, 0x00	; 0
 480:	40 30       	cpi	r20, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	59 07       	cpc	r21, r25
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	69 07       	cpc	r22, r25
 48a:	90 e4       	ldi	r25, 0x40	; 64
 48c:	79 07       	cpc	r23, r25
 48e:	60 f3       	brcs	.-40     	; 0x468 <__stack+0x9>
 490:	2b 8f       	std	Y+27, r18	; 0x1b
 492:	3c 8f       	std	Y+28, r19	; 0x1c
 494:	db 01       	movw	r26, r22
 496:	ca 01       	movw	r24, r20
 498:	8f 77       	andi	r24, 0x7F	; 127
 49a:	90 70       	andi	r25, 0x00	; 0
 49c:	a0 70       	andi	r26, 0x00	; 0
 49e:	b0 70       	andi	r27, 0x00	; 0
 4a0:	80 34       	cpi	r24, 0x40	; 64
 4a2:	91 05       	cpc	r25, r1
 4a4:	a1 05       	cpc	r26, r1
 4a6:	b1 05       	cpc	r27, r1
 4a8:	61 f4       	brne	.+24     	; 0x4c2 <__stack+0x63>
 4aa:	47 fd       	sbrc	r20, 7
 4ac:	0a c0       	rjmp	.+20     	; 0x4c2 <__stack+0x63>
 4ae:	e1 14       	cp	r14, r1
 4b0:	f1 04       	cpc	r15, r1
 4b2:	01 05       	cpc	r16, r1
 4b4:	11 05       	cpc	r17, r1
 4b6:	29 f0       	breq	.+10     	; 0x4c2 <__stack+0x63>
 4b8:	40 5c       	subi	r20, 0xC0	; 192
 4ba:	5f 4f       	sbci	r21, 0xFF	; 255
 4bc:	6f 4f       	sbci	r22, 0xFF	; 255
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	40 78       	andi	r20, 0x80	; 128
 4c2:	1a 8e       	std	Y+26, r1	; 0x1a
 4c4:	fe 17       	cp	r31, r30
 4c6:	11 f0       	breq	.+4      	; 0x4cc <__stack+0x6d>
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	8a 8f       	std	Y+26, r24	; 0x1a
 4cc:	4d 8f       	std	Y+29, r20	; 0x1d
 4ce:	5e 8f       	std	Y+30, r21	; 0x1e
 4d0:	6f 8f       	std	Y+31, r22	; 0x1f
 4d2:	78 a3       	std	Y+32, r23	; 0x20
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	89 8f       	std	Y+25, r24	; 0x19
 4d8:	ce 01       	movw	r24, r28
 4da:	49 96       	adiw	r24, 0x19	; 25
 4dc:	0e 94 c8 02 	call	0x590	; 0x590 <__pack_f>
 4e0:	a0 96       	adiw	r28, 0x20	; 32
 4e2:	e2 e1       	ldi	r30, 0x12	; 18
 4e4:	0c 94 31 04 	jmp	0x862	; 0x862 <__epilogue_restores__>

000004e8 <__fixsfsi>:
 4e8:	ac e0       	ldi	r26, 0x0C	; 12
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	ea e7       	ldi	r30, 0x7A	; 122
 4ee:	f2 e0       	ldi	r31, 0x02	; 2
 4f0:	0c 94 25 04 	jmp	0x84a	; 0x84a <__prologue_saves__+0x20>
 4f4:	69 83       	std	Y+1, r22	; 0x01
 4f6:	7a 83       	std	Y+2, r23	; 0x02
 4f8:	8b 83       	std	Y+3, r24	; 0x03
 4fa:	9c 83       	std	Y+4, r25	; 0x04
 4fc:	ce 01       	movw	r24, r28
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	be 01       	movw	r22, r28
 502:	6b 5f       	subi	r22, 0xFB	; 251
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	0e 94 9d 03 	call	0x73a	; 0x73a <__unpack_f>
 50a:	8d 81       	ldd	r24, Y+5	; 0x05
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	61 f1       	breq	.+88     	; 0x568 <__fixsfsi+0x80>
 510:	82 30       	cpi	r24, 0x02	; 2
 512:	50 f1       	brcs	.+84     	; 0x568 <__fixsfsi+0x80>
 514:	84 30       	cpi	r24, 0x04	; 4
 516:	21 f4       	brne	.+8      	; 0x520 <__fixsfsi+0x38>
 518:	8e 81       	ldd	r24, Y+6	; 0x06
 51a:	88 23       	and	r24, r24
 51c:	51 f1       	breq	.+84     	; 0x572 <__fixsfsi+0x8a>
 51e:	2e c0       	rjmp	.+92     	; 0x57c <__fixsfsi+0x94>
 520:	2f 81       	ldd	r18, Y+7	; 0x07
 522:	38 85       	ldd	r19, Y+8	; 0x08
 524:	37 fd       	sbrc	r19, 7
 526:	20 c0       	rjmp	.+64     	; 0x568 <__fixsfsi+0x80>
 528:	6e 81       	ldd	r22, Y+6	; 0x06
 52a:	2f 31       	cpi	r18, 0x1F	; 31
 52c:	31 05       	cpc	r19, r1
 52e:	1c f0       	brlt	.+6      	; 0x536 <__fixsfsi+0x4e>
 530:	66 23       	and	r22, r22
 532:	f9 f0       	breq	.+62     	; 0x572 <__fixsfsi+0x8a>
 534:	23 c0       	rjmp	.+70     	; 0x57c <__fixsfsi+0x94>
 536:	8e e1       	ldi	r24, 0x1E	; 30
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	82 1b       	sub	r24, r18
 53c:	93 0b       	sbc	r25, r19
 53e:	29 85       	ldd	r18, Y+9	; 0x09
 540:	3a 85       	ldd	r19, Y+10	; 0x0a
 542:	4b 85       	ldd	r20, Y+11	; 0x0b
 544:	5c 85       	ldd	r21, Y+12	; 0x0c
 546:	04 c0       	rjmp	.+8      	; 0x550 <__fixsfsi+0x68>
 548:	56 95       	lsr	r21
 54a:	47 95       	ror	r20
 54c:	37 95       	ror	r19
 54e:	27 95       	ror	r18
 550:	8a 95       	dec	r24
 552:	d2 f7       	brpl	.-12     	; 0x548 <__fixsfsi+0x60>
 554:	66 23       	and	r22, r22
 556:	b1 f0       	breq	.+44     	; 0x584 <__fixsfsi+0x9c>
 558:	50 95       	com	r21
 55a:	40 95       	com	r20
 55c:	30 95       	com	r19
 55e:	21 95       	neg	r18
 560:	3f 4f       	sbci	r19, 0xFF	; 255
 562:	4f 4f       	sbci	r20, 0xFF	; 255
 564:	5f 4f       	sbci	r21, 0xFF	; 255
 566:	0e c0       	rjmp	.+28     	; 0x584 <__fixsfsi+0x9c>
 568:	20 e0       	ldi	r18, 0x00	; 0
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	40 e0       	ldi	r20, 0x00	; 0
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	09 c0       	rjmp	.+18     	; 0x584 <__fixsfsi+0x9c>
 572:	2f ef       	ldi	r18, 0xFF	; 255
 574:	3f ef       	ldi	r19, 0xFF	; 255
 576:	4f ef       	ldi	r20, 0xFF	; 255
 578:	5f e7       	ldi	r21, 0x7F	; 127
 57a:	04 c0       	rjmp	.+8      	; 0x584 <__fixsfsi+0x9c>
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	50 e8       	ldi	r21, 0x80	; 128
 584:	b9 01       	movw	r22, r18
 586:	ca 01       	movw	r24, r20
 588:	2c 96       	adiw	r28, 0x0c	; 12
 58a:	e2 e0       	ldi	r30, 0x02	; 2
 58c:	0c 94 41 04 	jmp	0x882	; 0x882 <__epilogue_restores__+0x20>

00000590 <__pack_f>:
 590:	df 92       	push	r13
 592:	ef 92       	push	r14
 594:	ff 92       	push	r15
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	fc 01       	movw	r30, r24
 59c:	e4 80       	ldd	r14, Z+4	; 0x04
 59e:	f5 80       	ldd	r15, Z+5	; 0x05
 5a0:	06 81       	ldd	r16, Z+6	; 0x06
 5a2:	17 81       	ldd	r17, Z+7	; 0x07
 5a4:	d1 80       	ldd	r13, Z+1	; 0x01
 5a6:	80 81       	ld	r24, Z
 5a8:	82 30       	cpi	r24, 0x02	; 2
 5aa:	48 f4       	brcc	.+18     	; 0x5be <__pack_f+0x2e>
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	a0 e1       	ldi	r26, 0x10	; 16
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	e8 2a       	or	r14, r24
 5b6:	f9 2a       	or	r15, r25
 5b8:	0a 2b       	or	r16, r26
 5ba:	1b 2b       	or	r17, r27
 5bc:	a5 c0       	rjmp	.+330    	; 0x708 <__pack_f+0x178>
 5be:	84 30       	cpi	r24, 0x04	; 4
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <__pack_f+0x34>
 5c2:	9f c0       	rjmp	.+318    	; 0x702 <__pack_f+0x172>
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	21 f4       	brne	.+8      	; 0x5d0 <__pack_f+0x40>
 5c8:	ee 24       	eor	r14, r14
 5ca:	ff 24       	eor	r15, r15
 5cc:	87 01       	movw	r16, r14
 5ce:	05 c0       	rjmp	.+10     	; 0x5da <__pack_f+0x4a>
 5d0:	e1 14       	cp	r14, r1
 5d2:	f1 04       	cpc	r15, r1
 5d4:	01 05       	cpc	r16, r1
 5d6:	11 05       	cpc	r17, r1
 5d8:	19 f4       	brne	.+6      	; 0x5e0 <__pack_f+0x50>
 5da:	e0 e0       	ldi	r30, 0x00	; 0
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	96 c0       	rjmp	.+300    	; 0x70c <__pack_f+0x17c>
 5e0:	62 81       	ldd	r22, Z+2	; 0x02
 5e2:	73 81       	ldd	r23, Z+3	; 0x03
 5e4:	9f ef       	ldi	r25, 0xFF	; 255
 5e6:	62 38       	cpi	r22, 0x82	; 130
 5e8:	79 07       	cpc	r23, r25
 5ea:	0c f0       	brlt	.+2      	; 0x5ee <__pack_f+0x5e>
 5ec:	5b c0       	rjmp	.+182    	; 0x6a4 <__pack_f+0x114>
 5ee:	22 e8       	ldi	r18, 0x82	; 130
 5f0:	3f ef       	ldi	r19, 0xFF	; 255
 5f2:	26 1b       	sub	r18, r22
 5f4:	37 0b       	sbc	r19, r23
 5f6:	2a 31       	cpi	r18, 0x1A	; 26
 5f8:	31 05       	cpc	r19, r1
 5fa:	2c f0       	brlt	.+10     	; 0x606 <__pack_f+0x76>
 5fc:	20 e0       	ldi	r18, 0x00	; 0
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	50 e0       	ldi	r21, 0x00	; 0
 604:	2a c0       	rjmp	.+84     	; 0x65a <__pack_f+0xca>
 606:	b8 01       	movw	r22, r16
 608:	a7 01       	movw	r20, r14
 60a:	02 2e       	mov	r0, r18
 60c:	04 c0       	rjmp	.+8      	; 0x616 <__pack_f+0x86>
 60e:	76 95       	lsr	r23
 610:	67 95       	ror	r22
 612:	57 95       	ror	r21
 614:	47 95       	ror	r20
 616:	0a 94       	dec	r0
 618:	d2 f7       	brpl	.-12     	; 0x60e <__pack_f+0x7e>
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	a0 e0       	ldi	r26, 0x00	; 0
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	04 c0       	rjmp	.+8      	; 0x62c <__pack_f+0x9c>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	aa 1f       	adc	r26, r26
 62a:	bb 1f       	adc	r27, r27
 62c:	2a 95       	dec	r18
 62e:	d2 f7       	brpl	.-12     	; 0x624 <__pack_f+0x94>
 630:	01 97       	sbiw	r24, 0x01	; 1
 632:	a1 09       	sbc	r26, r1
 634:	b1 09       	sbc	r27, r1
 636:	8e 21       	and	r24, r14
 638:	9f 21       	and	r25, r15
 63a:	a0 23       	and	r26, r16
 63c:	b1 23       	and	r27, r17
 63e:	00 97       	sbiw	r24, 0x00	; 0
 640:	a1 05       	cpc	r26, r1
 642:	b1 05       	cpc	r27, r1
 644:	21 f0       	breq	.+8      	; 0x64e <__pack_f+0xbe>
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	a0 e0       	ldi	r26, 0x00	; 0
 64c:	b0 e0       	ldi	r27, 0x00	; 0
 64e:	9a 01       	movw	r18, r20
 650:	ab 01       	movw	r20, r22
 652:	28 2b       	or	r18, r24
 654:	39 2b       	or	r19, r25
 656:	4a 2b       	or	r20, r26
 658:	5b 2b       	or	r21, r27
 65a:	da 01       	movw	r26, r20
 65c:	c9 01       	movw	r24, r18
 65e:	8f 77       	andi	r24, 0x7F	; 127
 660:	90 70       	andi	r25, 0x00	; 0
 662:	a0 70       	andi	r26, 0x00	; 0
 664:	b0 70       	andi	r27, 0x00	; 0
 666:	80 34       	cpi	r24, 0x40	; 64
 668:	91 05       	cpc	r25, r1
 66a:	a1 05       	cpc	r26, r1
 66c:	b1 05       	cpc	r27, r1
 66e:	39 f4       	brne	.+14     	; 0x67e <__pack_f+0xee>
 670:	27 ff       	sbrs	r18, 7
 672:	09 c0       	rjmp	.+18     	; 0x686 <__pack_f+0xf6>
 674:	20 5c       	subi	r18, 0xC0	; 192
 676:	3f 4f       	sbci	r19, 0xFF	; 255
 678:	4f 4f       	sbci	r20, 0xFF	; 255
 67a:	5f 4f       	sbci	r21, 0xFF	; 255
 67c:	04 c0       	rjmp	.+8      	; 0x686 <__pack_f+0xf6>
 67e:	21 5c       	subi	r18, 0xC1	; 193
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	4f 4f       	sbci	r20, 0xFF	; 255
 684:	5f 4f       	sbci	r21, 0xFF	; 255
 686:	e0 e0       	ldi	r30, 0x00	; 0
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	20 30       	cpi	r18, 0x00	; 0
 68c:	a0 e0       	ldi	r26, 0x00	; 0
 68e:	3a 07       	cpc	r19, r26
 690:	a0 e0       	ldi	r26, 0x00	; 0
 692:	4a 07       	cpc	r20, r26
 694:	a0 e4       	ldi	r26, 0x40	; 64
 696:	5a 07       	cpc	r21, r26
 698:	10 f0       	brcs	.+4      	; 0x69e <__pack_f+0x10e>
 69a:	e1 e0       	ldi	r30, 0x01	; 1
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	79 01       	movw	r14, r18
 6a0:	8a 01       	movw	r16, r20
 6a2:	27 c0       	rjmp	.+78     	; 0x6f2 <__pack_f+0x162>
 6a4:	60 38       	cpi	r22, 0x80	; 128
 6a6:	71 05       	cpc	r23, r1
 6a8:	64 f5       	brge	.+88     	; 0x702 <__pack_f+0x172>
 6aa:	fb 01       	movw	r30, r22
 6ac:	e1 58       	subi	r30, 0x81	; 129
 6ae:	ff 4f       	sbci	r31, 0xFF	; 255
 6b0:	d8 01       	movw	r26, r16
 6b2:	c7 01       	movw	r24, r14
 6b4:	8f 77       	andi	r24, 0x7F	; 127
 6b6:	90 70       	andi	r25, 0x00	; 0
 6b8:	a0 70       	andi	r26, 0x00	; 0
 6ba:	b0 70       	andi	r27, 0x00	; 0
 6bc:	80 34       	cpi	r24, 0x40	; 64
 6be:	91 05       	cpc	r25, r1
 6c0:	a1 05       	cpc	r26, r1
 6c2:	b1 05       	cpc	r27, r1
 6c4:	39 f4       	brne	.+14     	; 0x6d4 <__pack_f+0x144>
 6c6:	e7 fe       	sbrs	r14, 7
 6c8:	0d c0       	rjmp	.+26     	; 0x6e4 <__pack_f+0x154>
 6ca:	80 e4       	ldi	r24, 0x40	; 64
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	a0 e0       	ldi	r26, 0x00	; 0
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	04 c0       	rjmp	.+8      	; 0x6dc <__pack_f+0x14c>
 6d4:	8f e3       	ldi	r24, 0x3F	; 63
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	a0 e0       	ldi	r26, 0x00	; 0
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	e8 0e       	add	r14, r24
 6de:	f9 1e       	adc	r15, r25
 6e0:	0a 1f       	adc	r16, r26
 6e2:	1b 1f       	adc	r17, r27
 6e4:	17 ff       	sbrs	r17, 7
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <__pack_f+0x162>
 6e8:	16 95       	lsr	r17
 6ea:	07 95       	ror	r16
 6ec:	f7 94       	ror	r15
 6ee:	e7 94       	ror	r14
 6f0:	31 96       	adiw	r30, 0x01	; 1
 6f2:	87 e0       	ldi	r24, 0x07	; 7
 6f4:	16 95       	lsr	r17
 6f6:	07 95       	ror	r16
 6f8:	f7 94       	ror	r15
 6fa:	e7 94       	ror	r14
 6fc:	8a 95       	dec	r24
 6fe:	d1 f7       	brne	.-12     	; 0x6f4 <__pack_f+0x164>
 700:	05 c0       	rjmp	.+10     	; 0x70c <__pack_f+0x17c>
 702:	ee 24       	eor	r14, r14
 704:	ff 24       	eor	r15, r15
 706:	87 01       	movw	r16, r14
 708:	ef ef       	ldi	r30, 0xFF	; 255
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	6e 2f       	mov	r22, r30
 70e:	67 95       	ror	r22
 710:	66 27       	eor	r22, r22
 712:	67 95       	ror	r22
 714:	90 2f       	mov	r25, r16
 716:	9f 77       	andi	r25, 0x7F	; 127
 718:	d7 94       	ror	r13
 71a:	dd 24       	eor	r13, r13
 71c:	d7 94       	ror	r13
 71e:	8e 2f       	mov	r24, r30
 720:	86 95       	lsr	r24
 722:	49 2f       	mov	r20, r25
 724:	46 2b       	or	r20, r22
 726:	58 2f       	mov	r21, r24
 728:	5d 29       	or	r21, r13
 72a:	b7 01       	movw	r22, r14
 72c:	ca 01       	movw	r24, r20
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	ef 90       	pop	r14
 736:	df 90       	pop	r13
 738:	08 95       	ret

0000073a <__unpack_f>:
 73a:	fc 01       	movw	r30, r24
 73c:	db 01       	movw	r26, r22
 73e:	40 81       	ld	r20, Z
 740:	51 81       	ldd	r21, Z+1	; 0x01
 742:	22 81       	ldd	r18, Z+2	; 0x02
 744:	62 2f       	mov	r22, r18
 746:	6f 77       	andi	r22, 0x7F	; 127
 748:	70 e0       	ldi	r23, 0x00	; 0
 74a:	22 1f       	adc	r18, r18
 74c:	22 27       	eor	r18, r18
 74e:	22 1f       	adc	r18, r18
 750:	93 81       	ldd	r25, Z+3	; 0x03
 752:	89 2f       	mov	r24, r25
 754:	88 0f       	add	r24, r24
 756:	82 2b       	or	r24, r18
 758:	28 2f       	mov	r18, r24
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	99 1f       	adc	r25, r25
 75e:	99 27       	eor	r25, r25
 760:	99 1f       	adc	r25, r25
 762:	11 96       	adiw	r26, 0x01	; 1
 764:	9c 93       	st	X, r25
 766:	11 97       	sbiw	r26, 0x01	; 1
 768:	21 15       	cp	r18, r1
 76a:	31 05       	cpc	r19, r1
 76c:	a9 f5       	brne	.+106    	; 0x7d8 <__unpack_f+0x9e>
 76e:	41 15       	cp	r20, r1
 770:	51 05       	cpc	r21, r1
 772:	61 05       	cpc	r22, r1
 774:	71 05       	cpc	r23, r1
 776:	11 f4       	brne	.+4      	; 0x77c <__unpack_f+0x42>
 778:	82 e0       	ldi	r24, 0x02	; 2
 77a:	37 c0       	rjmp	.+110    	; 0x7ea <__unpack_f+0xb0>
 77c:	82 e8       	ldi	r24, 0x82	; 130
 77e:	9f ef       	ldi	r25, 0xFF	; 255
 780:	13 96       	adiw	r26, 0x03	; 3
 782:	9c 93       	st	X, r25
 784:	8e 93       	st	-X, r24
 786:	12 97       	sbiw	r26, 0x02	; 2
 788:	9a 01       	movw	r18, r20
 78a:	ab 01       	movw	r20, r22
 78c:	67 e0       	ldi	r22, 0x07	; 7
 78e:	22 0f       	add	r18, r18
 790:	33 1f       	adc	r19, r19
 792:	44 1f       	adc	r20, r20
 794:	55 1f       	adc	r21, r21
 796:	6a 95       	dec	r22
 798:	d1 f7       	brne	.-12     	; 0x78e <__unpack_f+0x54>
 79a:	83 e0       	ldi	r24, 0x03	; 3
 79c:	8c 93       	st	X, r24
 79e:	0d c0       	rjmp	.+26     	; 0x7ba <__unpack_f+0x80>
 7a0:	22 0f       	add	r18, r18
 7a2:	33 1f       	adc	r19, r19
 7a4:	44 1f       	adc	r20, r20
 7a6:	55 1f       	adc	r21, r21
 7a8:	12 96       	adiw	r26, 0x02	; 2
 7aa:	8d 91       	ld	r24, X+
 7ac:	9c 91       	ld	r25, X
 7ae:	13 97       	sbiw	r26, 0x03	; 3
 7b0:	01 97       	sbiw	r24, 0x01	; 1
 7b2:	13 96       	adiw	r26, 0x03	; 3
 7b4:	9c 93       	st	X, r25
 7b6:	8e 93       	st	-X, r24
 7b8:	12 97       	sbiw	r26, 0x02	; 2
 7ba:	20 30       	cpi	r18, 0x00	; 0
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	38 07       	cpc	r19, r24
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	48 07       	cpc	r20, r24
 7c4:	80 e4       	ldi	r24, 0x40	; 64
 7c6:	58 07       	cpc	r21, r24
 7c8:	58 f3       	brcs	.-42     	; 0x7a0 <__unpack_f+0x66>
 7ca:	14 96       	adiw	r26, 0x04	; 4
 7cc:	2d 93       	st	X+, r18
 7ce:	3d 93       	st	X+, r19
 7d0:	4d 93       	st	X+, r20
 7d2:	5c 93       	st	X, r21
 7d4:	17 97       	sbiw	r26, 0x07	; 7
 7d6:	08 95       	ret
 7d8:	2f 3f       	cpi	r18, 0xFF	; 255
 7da:	31 05       	cpc	r19, r1
 7dc:	79 f4       	brne	.+30     	; 0x7fc <__unpack_f+0xc2>
 7de:	41 15       	cp	r20, r1
 7e0:	51 05       	cpc	r21, r1
 7e2:	61 05       	cpc	r22, r1
 7e4:	71 05       	cpc	r23, r1
 7e6:	19 f4       	brne	.+6      	; 0x7ee <__unpack_f+0xb4>
 7e8:	84 e0       	ldi	r24, 0x04	; 4
 7ea:	8c 93       	st	X, r24
 7ec:	08 95       	ret
 7ee:	64 ff       	sbrs	r22, 4
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <__unpack_f+0xbe>
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	8c 93       	st	X, r24
 7f6:	12 c0       	rjmp	.+36     	; 0x81c <__unpack_f+0xe2>
 7f8:	1c 92       	st	X, r1
 7fa:	10 c0       	rjmp	.+32     	; 0x81c <__unpack_f+0xe2>
 7fc:	2f 57       	subi	r18, 0x7F	; 127
 7fe:	30 40       	sbci	r19, 0x00	; 0
 800:	13 96       	adiw	r26, 0x03	; 3
 802:	3c 93       	st	X, r19
 804:	2e 93       	st	-X, r18
 806:	12 97       	sbiw	r26, 0x02	; 2
 808:	83 e0       	ldi	r24, 0x03	; 3
 80a:	8c 93       	st	X, r24
 80c:	87 e0       	ldi	r24, 0x07	; 7
 80e:	44 0f       	add	r20, r20
 810:	55 1f       	adc	r21, r21
 812:	66 1f       	adc	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	8a 95       	dec	r24
 818:	d1 f7       	brne	.-12     	; 0x80e <__unpack_f+0xd4>
 81a:	70 64       	ori	r23, 0x40	; 64
 81c:	14 96       	adiw	r26, 0x04	; 4
 81e:	4d 93       	st	X+, r20
 820:	5d 93       	st	X+, r21
 822:	6d 93       	st	X+, r22
 824:	7c 93       	st	X, r23
 826:	17 97       	sbiw	r26, 0x07	; 7
 828:	08 95       	ret

0000082a <__prologue_saves__>:
 82a:	2f 92       	push	r2
 82c:	3f 92       	push	r3
 82e:	4f 92       	push	r4
 830:	5f 92       	push	r5
 832:	6f 92       	push	r6
 834:	7f 92       	push	r7
 836:	8f 92       	push	r8
 838:	9f 92       	push	r9
 83a:	af 92       	push	r10
 83c:	bf 92       	push	r11
 83e:	cf 92       	push	r12
 840:	df 92       	push	r13
 842:	ef 92       	push	r14
 844:	ff 92       	push	r15
 846:	0f 93       	push	r16
 848:	1f 93       	push	r17
 84a:	cf 93       	push	r28
 84c:	df 93       	push	r29
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
 852:	ca 1b       	sub	r28, r26
 854:	db 0b       	sbc	r29, r27
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	f8 94       	cli
 85a:	de bf       	out	0x3e, r29	; 62
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	cd bf       	out	0x3d, r28	; 61
 860:	09 94       	ijmp

00000862 <__epilogue_restores__>:
 862:	2a 88       	ldd	r2, Y+18	; 0x12
 864:	39 88       	ldd	r3, Y+17	; 0x11
 866:	48 88       	ldd	r4, Y+16	; 0x10
 868:	5f 84       	ldd	r5, Y+15	; 0x0f
 86a:	6e 84       	ldd	r6, Y+14	; 0x0e
 86c:	7d 84       	ldd	r7, Y+13	; 0x0d
 86e:	8c 84       	ldd	r8, Y+12	; 0x0c
 870:	9b 84       	ldd	r9, Y+11	; 0x0b
 872:	aa 84       	ldd	r10, Y+10	; 0x0a
 874:	b9 84       	ldd	r11, Y+9	; 0x09
 876:	c8 84       	ldd	r12, Y+8	; 0x08
 878:	df 80       	ldd	r13, Y+7	; 0x07
 87a:	ee 80       	ldd	r14, Y+6	; 0x06
 87c:	fd 80       	ldd	r15, Y+5	; 0x05
 87e:	0c 81       	ldd	r16, Y+4	; 0x04
 880:	1b 81       	ldd	r17, Y+3	; 0x03
 882:	aa 81       	ldd	r26, Y+2	; 0x02
 884:	b9 81       	ldd	r27, Y+1	; 0x01
 886:	ce 0f       	add	r28, r30
 888:	d1 1d       	adc	r29, r1
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	f8 94       	cli
 88e:	de bf       	out	0x3e, r29	; 62
 890:	0f be       	out	0x3f, r0	; 63
 892:	cd bf       	out	0x3d, r28	; 61
 894:	ed 01       	movw	r28, r26
 896:	08 95       	ret

00000898 <_exit>:
 898:	f8 94       	cli

0000089a <__stop_program>:
 89a:	ff cf       	rjmp	.-2      	; 0x89a <__stop_program>
